Remove useless logs
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#	modified:   Makefile
#	modified:   fusexmp.c
#
# ------------------------ >8 ------------------------
# Do not touch the line above.
# Everything below will be removed.
diff --git a/Makefile b/Makefile
index e1d6a94..877ac55 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 all:
-	gcc -o myfs fusexmp.c -lfuse -D_FILE_OFFSET_BITS=64
+	gcc -Wall fusexmp.c `pkg-config fuse --cflags --libs` -o myfs
 
 clean:
 	rm ./myfs
diff --git a/fusexmp.c b/fusexmp.c
index 04fa392..72a06c7 100644
--- a/fusexmp.c
+++ b/fusexmp.c
@@ -61,8 +61,6 @@ static int xmp_getattr(const char *path, struct stat *stbuf)
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
 
-  fprintf(stdout, "getattr: %s\n", fullpath);
-
 	res = lstat(fullpath, stbuf);
 	if (res == -1)
 		return -errno;
@@ -78,8 +76,6 @@ static int xmp_access(const char *path, int mask)
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
 
-  fprintf(stdout, "access: %s\n", fullpath);
-
 	res = access(fullpath, mask);
 	if (res == -1)
 		return -errno;
@@ -95,7 +91,6 @@ static int xmp_readlink(const char *path, char *buf, size_t size)
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
 
-  fprintf(stdout, "readlink: %s\n", fullpath);
 
 	res = readlink(fullpath, buf, size - 1);
 	if (res == -1)
@@ -120,8 +115,6 @@ static int xmp_readdir(const char *path, void *buf, fuse_fill_dir_t filler,
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
 
-  fprintf(stdout, "readdir: %s\n", fullpath);
-
 	dp = opendir(fullpath);
 	if (dp == NULL)
 		return -errno;
@@ -132,8 +125,6 @@ static int xmp_readdir(const char *path, void *buf, fuse_fill_dir_t filler,
 		st.st_ino = de->d_ino;
 		st.st_mode = de->d_type << 12;
 
-    fprintf(stdout, "directory: %s\n", de->d_name);
-
 		if (filler(buf, de->d_name, &st, 0))
 			break;
 	}
@@ -156,8 +147,6 @@ static int xmp_mknod(const char *path, mode_t mode, dev_t rdev)
   for (int i = 0; i < 2; ++i) {
     const char* fullpath = fullpaths[i];
 
-    fprintf(stdout, "mknod: %s\n", fullpath);
-
     if (S_ISREG(mode)) {
       res = open(fullpath, O_CREAT | O_EXCL | O_WRONLY, mode);
       if (res >= 0)
@@ -184,8 +173,6 @@ static int xmp_mkdir(const char *path, mode_t mode)
   for (int i = 0; i < 2; ++i) {
     const char* fullpath = fullpaths[i];
 
-    fprintf(stdout, "mkdir: %s\n", fullpath);
-
     res = mkdir(fullpath, mode);
     if (res == -1)
       return -errno;
@@ -204,7 +191,6 @@ static int xmp_unlink(const char *path)
 
   for (int i = 0; i < 2; ++i) {
     const char* fullpath = fullpaths[i];
-    fprintf(stdout, "unlink: %s\n", fullpath);
     res = unlink(fullpath);
     if (res == -1)
       return -errno;
@@ -223,7 +209,6 @@ static int xmp_rmdir(const char *path)
 
   for (int i = 0; i < 2; ++i) {
     const char* fullpath = fullpaths[i];
-    fprintf(stdout, "rmdir: %s\n", fullpath);
     res = rmdir(fullpath);
     if (res == -1)
       return -errno;
@@ -374,8 +359,6 @@ static int xmp_open(const char *path, struct fuse_file_info *fi)
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
 
-  fprintf(stdout, "open: %s\n", fullpath);
-
   res = open(fullpath, fi->flags);
   if (res == -1)
     return -errno;
@@ -393,8 +376,6 @@ static int xmp_read(const char *path, char *buf, size_t size, off_t offset,
 
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
-  fprintf(stdout, "read: %s\n", fullpath);
-
   (void) fi;
   fd = open(fullpath, O_RDONLY);
   if (fd == -1)
@@ -422,7 +403,6 @@ static int xmp_write(const char *path, const char *buf, size_t size,
 
   for (int i = 0; i < 2; ++i) {
     const char* fullpath = fullpaths[i];
-    fprintf(stdout, "write: %s\n", fullpath);
 
     fd = open(fullpath, O_WRONLY);
     if (fd == -1)
@@ -445,8 +425,6 @@ static int xmp_statfs(const char *path, struct statvfs *stbuf)
 
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
-  fprintf(stdout, "statfs: %s\n", fullpath);
-
   res = statvfs(fullpath, stbuf);
   if (res == -1)
     return -errno;
@@ -493,7 +471,6 @@ static int xmp_fallocate(const char *path, int mode,
 
   for (int i = 0; i < 2; ++i) {
     const char* fullpath = fullpaths[i];
-    fprintf(stdout, "fullpath: %s\n", fullpath);
 
     fd = open(fullpath, O_WRONLY);
     if (fd == -1)
@@ -520,7 +497,6 @@ static int xmp_setxattr(const char *path, const char *name, const char *value,
 
   for (int i = 0; i < 2; ++i) {
     const char* fullpath = fullpaths[i];
-    fprintf(stdout, "setxattr: %s\n", fullpath);
     int res = lsetxattr(fullpath, name, value, size, flags);
     if (res == -1)
       return -errno;
@@ -537,7 +513,6 @@ static int xmp_getxattr(const char *path, const char *name, char *value,
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
 
-  fprintf(stdout, "getxattr: %s\n", fullpath);
   int res = lgetxattr(fullpath, name, value, size);
   if (res == -1)
     return -errno;
@@ -551,7 +526,6 @@ static int xmp_listxattr(const char *path, char *list, size_t size)
   sprintf(fullpath, "%s%s",
       rand() % 2 == 0 ? global_context.driveA : global_context.driveB, path);
 
-  fprintf(stdout, "listxattr: %s\n", fullpath);
   int res = llistxattr(fullpath, list, size);
   if (res == -1)
     return -errno;
@@ -567,7 +541,6 @@ static int xmp_removexattr(const char *path, const char *name)
 
   for (int i = 0; i < 2; ++i) {
     const char* fullpath = fullpaths[i];
-    fprintf(stdout, "removexattr: %s\n", fullpath);
     int res = lremovexattr(fullpath, name);
     if (res == -1)
       return -errno;
